# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, Optional, TypeVar

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._benefit_utilization_summaries_async_operations import (
    build_get_operation_status_billing_account_scope_request,
    build_get_operation_status_billing_profile_scope_request,
    build_get_operation_status_reservation_order_scope_request,
    build_get_operation_status_reservation_scope_request,
    build_get_operation_status_savings_plan_order_scope_request,
    build_get_operation_status_savings_plan_scope_request,
)

T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class BenefitUtilizationSummariesAsyncOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.costmanagement.aio.CostManagementClient`'s
        :attr:`benefit_utilization_summaries_async` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace_async
    async def get_operation_status_billing_account_scope(
        self, billing_account_id: str, operation_id: str, **kwargs: Any
    ) -> _models.BenefitUtilizationSummariesOperationStatus:
        """Gets status of benefit utilization summaries report.

        .. seealso::
           - https://docs.microsoft.com/rest/api/cost-management/

        :param billing_account_id: Billing account ID. Required.
        :type billing_account_id: str
        :param operation_id: Operation id of the report being generated. Required.
        :type operation_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BenefitUtilizationSummariesOperationStatus or the result of cls(response)
        :rtype: ~azure.mgmt.costmanagement.models.BenefitUtilizationSummariesOperationStatus
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[_models.BenefitUtilizationSummariesOperationStatus] = kwargs.pop("cls", None)

        request = build_get_operation_status_billing_account_scope_request(
            billing_account_id=billing_account_id,
            operation_id=operation_id,
            api_version=api_version,
            template_url=self.get_operation_status_billing_account_scope.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("BenefitUtilizationSummariesOperationStatus", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_operation_status_billing_account_scope.metadata = {
        "url": "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.CostManagement/benefitUtilizationSummariesOperationResults/{operationId}"
    }

    @distributed_trace_async
    async def get_operation_status_billing_profile_scope(
        self, billing_account_id: str, billing_profile_id: str, operation_id: str, **kwargs: Any
    ) -> _models.BenefitUtilizationSummariesOperationStatus:
        """Gets status of benefit utilization summaries report.

        .. seealso::
           - https://docs.microsoft.com/rest/api/cost-management/

        :param billing_account_id: Billing account ID. Required.
        :type billing_account_id: str
        :param billing_profile_id: Billing profile ID. Required.
        :type billing_profile_id: str
        :param operation_id: Operation id of the report being generated. Required.
        :type operation_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BenefitUtilizationSummariesOperationStatus or the result of cls(response)
        :rtype: ~azure.mgmt.costmanagement.models.BenefitUtilizationSummariesOperationStatus
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[_models.BenefitUtilizationSummariesOperationStatus] = kwargs.pop("cls", None)

        request = build_get_operation_status_billing_profile_scope_request(
            billing_account_id=billing_account_id,
            billing_profile_id=billing_profile_id,
            operation_id=operation_id,
            api_version=api_version,
            template_url=self.get_operation_status_billing_profile_scope.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("BenefitUtilizationSummariesOperationStatus", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_operation_status_billing_profile_scope.metadata = {
        "url": "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/providers/Microsoft.CostManagement/benefitUtilizationSummariesOperationResults/{operationId}"
    }

    @distributed_trace_async
    async def get_operation_status_reservation_order_scope(
        self, reservation_order_id: str, operation_id: str, **kwargs: Any
    ) -> _models.BenefitUtilizationSummariesOperationStatus:
        """Gets status of benefit utilization summaries report.

        .. seealso::
           - https://docs.microsoft.com/rest/api/cost-management/

        :param reservation_order_id: Reservation Order ID. Required.
        :type reservation_order_id: str
        :param operation_id: Operation id of the report being generated. Required.
        :type operation_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BenefitUtilizationSummariesOperationStatus or the result of cls(response)
        :rtype: ~azure.mgmt.costmanagement.models.BenefitUtilizationSummariesOperationStatus
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[_models.BenefitUtilizationSummariesOperationStatus] = kwargs.pop("cls", None)

        request = build_get_operation_status_reservation_order_scope_request(
            reservation_order_id=reservation_order_id,
            operation_id=operation_id,
            api_version=api_version,
            template_url=self.get_operation_status_reservation_order_scope.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("BenefitUtilizationSummariesOperationStatus", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_operation_status_reservation_order_scope.metadata = {
        "url": "/providers/Microsoft.Capacity/reservationorders/{reservationOrderId}/providers/Microsoft.CostManagement/benefitUtilizationSummariesOperationResults/{operationId}"
    }

    @distributed_trace_async
    async def get_operation_status_reservation_scope(
        self, reservation_order_id: str, reservation_id: str, operation_id: str, **kwargs: Any
    ) -> _models.BenefitUtilizationSummariesOperationStatus:
        """Gets status of benefit utilization summaries report.

        .. seealso::
           - https://docs.microsoft.com/rest/api/cost-management/

        :param reservation_order_id: Reservation Order ID. Required.
        :type reservation_order_id: str
        :param reservation_id: Reservation ID. Required.
        :type reservation_id: str
        :param operation_id: Operation id of the report being generated. Required.
        :type operation_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BenefitUtilizationSummariesOperationStatus or the result of cls(response)
        :rtype: ~azure.mgmt.costmanagement.models.BenefitUtilizationSummariesOperationStatus
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[_models.BenefitUtilizationSummariesOperationStatus] = kwargs.pop("cls", None)

        request = build_get_operation_status_reservation_scope_request(
            reservation_order_id=reservation_order_id,
            reservation_id=reservation_id,
            operation_id=operation_id,
            api_version=api_version,
            template_url=self.get_operation_status_reservation_scope.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("BenefitUtilizationSummariesOperationStatus", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_operation_status_reservation_scope.metadata = {
        "url": "/providers/Microsoft.Capacity/reservationorders/{reservationOrderId}/reservations/{reservationId}/providers/Microsoft.CostManagement/benefitUtilizationSummariesOperationResults/{operationId}"
    }

    @distributed_trace_async
    async def get_operation_status_savings_plan_order_scope(
        self, savings_plan_order_id: str, operation_id: str, **kwargs: Any
    ) -> _models.BenefitUtilizationSummariesOperationStatus:
        """Gets status of benefit utilization summaries report.

        .. seealso::
           - https://docs.microsoft.com/rest/api/cost-management/

        :param savings_plan_order_id: Savings plan order ID. Required.
        :type savings_plan_order_id: str
        :param operation_id: Operation id of the report being generated. Required.
        :type operation_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BenefitUtilizationSummariesOperationStatus or the result of cls(response)
        :rtype: ~azure.mgmt.costmanagement.models.BenefitUtilizationSummariesOperationStatus
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[_models.BenefitUtilizationSummariesOperationStatus] = kwargs.pop("cls", None)

        request = build_get_operation_status_savings_plan_order_scope_request(
            savings_plan_order_id=savings_plan_order_id,
            operation_id=operation_id,
            api_version=api_version,
            template_url=self.get_operation_status_savings_plan_order_scope.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("BenefitUtilizationSummariesOperationStatus", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_operation_status_savings_plan_order_scope.metadata = {
        "url": "/providers/Microsoft.BillingBenefits/savingsPlanOrders/{savingsPlanOrderId}/providers/Microsoft.CostManagement/benefitUtilizationSummariesOperationResults/{operationId}"
    }

    @distributed_trace_async
    async def get_operation_status_savings_plan_scope(
        self, savings_plan_order_id: str, savings_plan_id: str, operation_id: str, **kwargs: Any
    ) -> _models.BenefitUtilizationSummariesOperationStatus:
        """Gets status of benefit utilization summaries report.

        .. seealso::
           - https://docs.microsoft.com/rest/api/cost-management/

        :param savings_plan_order_id: Savings plan order ID. Required.
        :type savings_plan_order_id: str
        :param savings_plan_id: Savings plan ID. Required.
        :type savings_plan_id: str
        :param operation_id: Operation id of the report being generated. Required.
        :type operation_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BenefitUtilizationSummariesOperationStatus or the result of cls(response)
        :rtype: ~azure.mgmt.costmanagement.models.BenefitUtilizationSummariesOperationStatus
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[_models.BenefitUtilizationSummariesOperationStatus] = kwargs.pop("cls", None)

        request = build_get_operation_status_savings_plan_scope_request(
            savings_plan_order_id=savings_plan_order_id,
            savings_plan_id=savings_plan_id,
            operation_id=operation_id,
            api_version=api_version,
            template_url=self.get_operation_status_savings_plan_scope.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("BenefitUtilizationSummariesOperationStatus", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_operation_status_savings_plan_scope.metadata = {
        "url": "/providers/Microsoft.BillingBenefits/savingsPlanOrders/{savingsPlanOrderId}/savingsPlans/{savingsPlanId}/providers/Microsoft.CostManagement/benefitUtilizationSummariesOperationResults/{operationId}"
    }
