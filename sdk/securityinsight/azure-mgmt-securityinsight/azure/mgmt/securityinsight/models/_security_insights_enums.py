# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from azure.core import CaseInsensitiveEnumMeta


class ActionType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of the automation rule action."""

    MODIFY_PROPERTIES = "ModifyProperties"
    """Modify an object's properties"""
    RUN_PLAYBOOK = "RunPlaybook"
    """Run a playbook on an object"""
    ADD_INCIDENT_TASK = "AddIncidentTask"
    """Add a task to an incident object"""


class AlertDetail(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Alert detail."""

    DISPLAY_NAME = "DisplayName"
    """Alert display name"""
    SEVERITY = "Severity"
    """Alert severity"""


class AlertProperty(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The V3 alert property."""

    ALERT_LINK = "AlertLink"
    """Alert's link"""
    CONFIDENCE_LEVEL = "ConfidenceLevel"
    """Confidence level property"""
    CONFIDENCE_SCORE = "ConfidenceScore"
    """Confidence score"""
    EXTENDED_LINKS = "ExtendedLinks"
    """Extended links to the alert"""
    PRODUCT_NAME = "ProductName"
    """Product name alert property"""
    PROVIDER_NAME = "ProviderName"
    """Provider name alert property"""
    PRODUCT_COMPONENT_NAME = "ProductComponentName"
    """Product component name alert property"""
    REMEDIATION_STEPS = "RemediationSteps"
    """Remediation steps alert property"""
    TECHNIQUES = "Techniques"
    """Techniques alert property"""


class AlertRuleKind(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The kind of the alert rule."""

    SCHEDULED = "Scheduled"
    MICROSOFT_SECURITY_INCIDENT_CREATION = "MicrosoftSecurityIncidentCreation"
    FUSION = "Fusion"
    ML_BEHAVIOR_ANALYTICS = "MLBehaviorAnalytics"
    THREAT_INTELLIGENCE = "ThreatIntelligence"
    NRT = "NRT"


class AlertSeverity(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The severity of the alert."""

    HIGH = "High"
    """High severity"""
    MEDIUM = "Medium"
    """Medium severity"""
    LOW = "Low"
    """Low severity"""
    INFORMATIONAL = "Informational"
    """Informational severity"""


class AlertStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The lifecycle status of the alert."""

    UNKNOWN = "Unknown"
    """Unknown value"""
    NEW = "New"
    """New alert"""
    RESOLVED = "Resolved"
    """Alert closed after handling"""
    DISMISSED = "Dismissed"
    """Alert dismissed as false positive"""
    IN_PROGRESS = "InProgress"
    """Alert is being handled"""


class AntispamMailDirection(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The directionality of this mail message."""

    UNKNOWN = "Unknown"
    """Unknown"""
    INBOUND = "Inbound"
    """Inbound"""
    OUTBOUND = "Outbound"
    """Outbound"""
    INTRAORG = "Intraorg"
    """Intraorg"""


class AttackTactic(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The severity for alerts created by this alert rule."""

    RECONNAISSANCE = "Reconnaissance"
    RESOURCE_DEVELOPMENT = "ResourceDevelopment"
    INITIAL_ACCESS = "InitialAccess"
    EXECUTION = "Execution"
    PERSISTENCE = "Persistence"
    PRIVILEGE_ESCALATION = "PrivilegeEscalation"
    DEFENSE_EVASION = "DefenseEvasion"
    CREDENTIAL_ACCESS = "CredentialAccess"
    DISCOVERY = "Discovery"
    LATERAL_MOVEMENT = "LateralMovement"
    COLLECTION = "Collection"
    EXFILTRATION = "Exfiltration"
    COMMAND_AND_CONTROL = "CommandAndControl"
    IMPACT = "Impact"
    PRE_ATTACK = "PreAttack"
    IMPAIR_PROCESS_CONTROL = "ImpairProcessControl"
    INHIBIT_RESPONSE_FUNCTION = "InhibitResponseFunction"


class AutomationRuleBooleanConditionSupportedOperator(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """AutomationRuleBooleanConditionSupportedOperator."""

    AND = "And"
    """Evaluates as true if all the item conditions are evaluated as true"""
    OR = "Or"
    """Evaluates as true if at least one of the item conditions are evaluated as true"""


class AutomationRulePropertyArrayChangedConditionSupportedArrayType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """AutomationRulePropertyArrayChangedConditionSupportedArrayType."""

    ALERTS = "Alerts"
    """Evaluate the condition on the alerts"""
    LABELS = "Labels"
    """Evaluate the condition on the labels"""
    TACTICS = "Tactics"
    """Evaluate the condition on the tactics"""
    COMMENTS = "Comments"
    """Evaluate the condition on the comments"""


class AutomationRulePropertyArrayChangedConditionSupportedChangeType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """AutomationRulePropertyArrayChangedConditionSupportedChangeType."""

    ADDED = "Added"
    """Evaluate the condition on items added to the array"""


class AutomationRulePropertyArrayConditionSupportedArrayConditionType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """AutomationRulePropertyArrayConditionSupportedArrayConditionType."""

    ANY_ITEM = "AnyItem"
    """Evaluate the condition as true if any item fulfills it"""


class AutomationRulePropertyArrayConditionSupportedArrayType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """AutomationRulePropertyArrayConditionSupportedArrayType."""

    CUSTOM_DETAILS = "CustomDetails"
    """Evaluate the condition on the custom detail keys"""
    CUSTOM_DETAIL_VALUES = "CustomDetailValues"
    """Evaluate the condition on a custom detail's values"""


class AutomationRulePropertyChangedConditionSupportedChangedType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """AutomationRulePropertyChangedConditionSupportedChangedType."""

    CHANGED_FROM = "ChangedFrom"
    """Evaluate the condition on the previous value of the property"""
    CHANGED_TO = "ChangedTo"
    """Evaluate the condition on the updated value of the property"""


class AutomationRulePropertyChangedConditionSupportedPropertyType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """AutomationRulePropertyChangedConditionSupportedPropertyType."""

    INCIDENT_SEVERITY = "IncidentSeverity"
    """Evaluate the condition on the incident severity"""
    INCIDENT_STATUS = "IncidentStatus"
    """Evaluate the condition on the incident status"""
    INCIDENT_OWNER = "IncidentOwner"
    """Evaluate the condition on the incident owner"""


class AutomationRulePropertyConditionSupportedOperator(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """AutomationRulePropertyConditionSupportedOperator."""

    EQUALS = "Equals"
    """Evaluates if the property equals at least one of the condition values"""
    NOT_EQUALS = "NotEquals"
    """Evaluates if the property does not equal any of the condition values"""
    CONTAINS = "Contains"
    """Evaluates if the property contains at least one of the condition values"""
    NOT_CONTAINS = "NotContains"
    """Evaluates if the property does not contain any of the condition values"""
    STARTS_WITH = "StartsWith"
    """Evaluates if the property starts with any of the condition values"""
    NOT_STARTS_WITH = "NotStartsWith"
    """Evaluates if the property does not start with any of the condition values"""
    ENDS_WITH = "EndsWith"
    """Evaluates if the property ends with any of the condition values"""
    NOT_ENDS_WITH = "NotEndsWith"
    """Evaluates if the property does not end with any of the condition values"""


class AutomationRulePropertyConditionSupportedProperty(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The property to evaluate in an automation rule property condition."""

    INCIDENT_TITLE = "IncidentTitle"
    """The title of the incident"""
    INCIDENT_DESCRIPTION = "IncidentDescription"
    """The description of the incident"""
    INCIDENT_SEVERITY = "IncidentSeverity"
    """The severity of the incident"""
    INCIDENT_STATUS = "IncidentStatus"
    """The status of the incident"""
    INCIDENT_RELATED_ANALYTIC_RULE_IDS = "IncidentRelatedAnalyticRuleIds"
    """The related Analytic rule ids of the incident"""
    INCIDENT_TACTICS = "IncidentTactics"
    """The tactics of the incident"""
    INCIDENT_LABEL = "IncidentLabel"
    """The labels of the incident"""
    INCIDENT_PROVIDER_NAME = "IncidentProviderName"
    """The provider name of the incident"""
    INCIDENT_UPDATED_BY_SOURCE = "IncidentUpdatedBySource"
    """The update source of the incident"""
    INCIDENT_CUSTOM_DETAILS_KEY = "IncidentCustomDetailsKey"
    """The incident custom detail key"""
    INCIDENT_CUSTOM_DETAILS_VALUE = "IncidentCustomDetailsValue"
    """The incident custom detail value"""
    ACCOUNT_AAD_TENANT_ID = "AccountAadTenantId"
    """The account Azure Active Directory tenant id"""
    ACCOUNT_AAD_USER_ID = "AccountAadUserId"
    """The account Azure Active Directory user id"""
    ACCOUNT_NAME = "AccountName"
    """The account name"""
    ACCOUNT_NT_DOMAIN = "AccountNTDomain"
    """The account NetBIOS domain name"""
    ACCOUNT_PUID = "AccountPUID"
    """The account Azure Active Directory Passport User ID"""
    ACCOUNT_SID = "AccountSid"
    """The account security identifier"""
    ACCOUNT_OBJECT_GUID = "AccountObjectGuid"
    """The account unique identifier"""
    ACCOUNT_UPN_SUFFIX = "AccountUPNSuffix"
    """The account user principal name suffix"""
    ALERT_PRODUCT_NAMES = "AlertProductNames"
    """The name of the product of the alert"""
    ALERT_ANALYTIC_RULE_IDS = "AlertAnalyticRuleIds"
    """The analytic rule ids of the alert"""
    AZURE_RESOURCE_RESOURCE_ID = "AzureResourceResourceId"
    """The Azure resource id"""
    AZURE_RESOURCE_SUBSCRIPTION_ID = "AzureResourceSubscriptionId"
    """The Azure resource subscription id"""
    CLOUD_APPLICATION_APP_ID = "CloudApplicationAppId"
    """The cloud application identifier"""
    CLOUD_APPLICATION_APP_NAME = "CloudApplicationAppName"
    """The cloud application name"""
    DNS_DOMAIN_NAME = "DNSDomainName"
    """The dns record domain name"""
    FILE_DIRECTORY = "FileDirectory"
    """The file directory full path"""
    FILE_NAME = "FileName"
    """The file name without path"""
    FILE_HASH_VALUE = "FileHashValue"
    """The file hash value"""
    HOST_AZURE_ID = "HostAzureID"
    """The host Azure resource id"""
    HOST_NAME = "HostName"
    """The host name without domain"""
    HOST_NET_BIOS_NAME = "HostNetBiosName"
    """The host NetBIOS name"""
    HOST_NT_DOMAIN = "HostNTDomain"
    """The host NT domain"""
    HOST_OS_VERSION = "HostOSVersion"
    """The host operating system"""
    IO_T_DEVICE_ID = "IoTDeviceId"
    """"The IoT device id"""
    IO_T_DEVICE_NAME = "IoTDeviceName"
    """The IoT device name"""
    IO_T_DEVICE_TYPE = "IoTDeviceType"
    """The IoT device type"""
    IO_T_DEVICE_VENDOR = "IoTDeviceVendor"
    """The IoT device vendor"""
    IO_T_DEVICE_MODEL = "IoTDeviceModel"
    """The IoT device model"""
    IO_T_DEVICE_OPERATING_SYSTEM = "IoTDeviceOperatingSystem"
    """The IoT device operating system"""
    IP_ADDRESS = "IPAddress"
    """The IP address"""
    MAILBOX_DISPLAY_NAME = "MailboxDisplayName"
    """The mailbox display name"""
    MAILBOX_PRIMARY_ADDRESS = "MailboxPrimaryAddress"
    """The mailbox primary address"""
    MAILBOX_UPN = "MailboxUPN"
    """The mailbox user principal name"""
    MAIL_MESSAGE_DELIVERY_ACTION = "MailMessageDeliveryAction"
    """The mail message delivery action"""
    MAIL_MESSAGE_DELIVERY_LOCATION = "MailMessageDeliveryLocation"
    """The mail message delivery location"""
    MAIL_MESSAGE_RECIPIENT = "MailMessageRecipient"
    """The mail message recipient"""
    MAIL_MESSAGE_SENDER_IP = "MailMessageSenderIP"
    """The mail message sender IP address"""
    MAIL_MESSAGE_SUBJECT = "MailMessageSubject"
    """The mail message subject"""
    MAIL_MESSAGE_P1_SENDER = "MailMessageP1Sender"
    """The mail message P1 sender"""
    MAIL_MESSAGE_P2_SENDER = "MailMessageP2Sender"
    """The mail message P2 sender"""
    MALWARE_CATEGORY = "MalwareCategory"
    """The malware category"""
    MALWARE_NAME = "MalwareName"
    """The malware name"""
    PROCESS_COMMAND_LINE = "ProcessCommandLine"
    """The process execution command line"""
    PROCESS_ID = "ProcessId"
    """The process id"""
    REGISTRY_KEY = "RegistryKey"
    """The registry key path"""
    REGISTRY_VALUE_DATA = "RegistryValueData"
    """The registry key value in string formatted representation"""
    URL = "Url"
    """The url"""


class Category(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Categories of recommendations."""

    ONBOARDING = "Onboarding"
    """Onboarding recommendation."""
    NEW_FEATURE = "NewFeature"
    """New feature recommendation."""
    SOC_EFFICIENCY = "SocEfficiency"
    """Soc Efficiency recommendation."""
    COST_OPTIMIZATION = "CostOptimization"
    """Cost optimization recommendation."""
    DEMO = "Demo"
    """Demo recommendation."""


class ConditionType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """ConditionType."""

    PROPERTY = "Property"
    """Evaluate an object property value"""
    PROPERTY_ARRAY = "PropertyArray"
    """Evaluate an object array property value"""
    PROPERTY_CHANGED = "PropertyChanged"
    """Evaluate an object property changed value"""
    PROPERTY_ARRAY_CHANGED = "PropertyArrayChanged"
    """Evaluate an object array property changed value"""
    BOOLEAN = "Boolean"
    """Apply a boolean operator (e.g AND, OR) to conditions"""


class ConfidenceLevel(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The confidence level of this alert."""

    UNKNOWN = "Unknown"
    """Unknown confidence, the is the default value"""
    LOW = "Low"
    """Low confidence, meaning we have some doubts this is indeed malicious or part of an attack"""
    HIGH = "High"
    """High confidence that the alert is true positive malicious"""


class ConfidenceScoreStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The confidence score calculation status, i.e. indicating if score calculation is pending for
    this alert, not applicable or final.
    """

    NOT_APPLICABLE = "NotApplicable"
    """Score will not be calculated for this alert as it is not supported by virtual analyst"""
    IN_PROCESS = "InProcess"
    """No score was set yet and calculation is in progress"""
    NOT_FINAL = "NotFinal"
    """Score is calculated and shown as part of the alert, but may be updated again at a later time
    #: following the processing of additional data"""
    FINAL = "Final"
    """Final score was calculated and available"""


class ConnectAuthKind(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The authentication kind used to poll the data."""

    BASIC = "Basic"
    O_AUTH2 = "OAuth2"
    API_KEY = "APIKey"


class ConnectivityType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """type of connectivity."""

    IS_CONNECTED_QUERY = "IsConnectedQuery"


class ContentType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The content type of a source control path."""

    ANALYTIC_RULE = "AnalyticRule"
    WORKBOOK = "Workbook"


class Context(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Context of recommendation."""

    ANALYTICS = "Analytics"
    """Analytics context."""
    INCIDENTS = "Incidents"
    """Incidents context."""
    OVERVIEW = "Overview"
    """Overview context."""
    NONE = "None"
    """No context."""


class CreatedByType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of identity that created the resource."""

    USER = "User"
    APPLICATION = "Application"
    MANAGED_IDENTITY = "ManagedIdentity"
    KEY = "Key"


class CustomEntityQueryKind(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The kind of the entity query that supports put request."""

    ACTIVITY = "Activity"


class DataConnectorAuthorizationState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Describes the state of user's authorization for a connector kind."""

    VALID = "Valid"
    INVALID = "Invalid"


class DataConnectorKind(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The kind of the data connector."""

    AZURE_ACTIVE_DIRECTORY = "AzureActiveDirectory"
    AZURE_SECURITY_CENTER = "AzureSecurityCenter"
    MICROSOFT_CLOUD_APP_SECURITY = "MicrosoftCloudAppSecurity"
    THREAT_INTELLIGENCE = "ThreatIntelligence"
    THREAT_INTELLIGENCE_TAXII = "ThreatIntelligenceTaxii"
    OFFICE365 = "Office365"
    OFFICE_ATP = "OfficeATP"
    OFFICE_IRM = "OfficeIRM"
    OFFICE365_PROJECT = "Office365Project"
    MICROSOFT_PURVIEW_INFORMATION_PROTECTION = "MicrosoftPurviewInformationProtection"
    OFFICE_POWER_BI = "OfficePowerBI"
    AMAZON_WEB_SERVICES_CLOUD_TRAIL = "AmazonWebServicesCloudTrail"
    AMAZON_WEB_SERVICES_S3 = "AmazonWebServicesS3"
    AZURE_ADVANCED_THREAT_PROTECTION = "AzureAdvancedThreatProtection"
    MICROSOFT_DEFENDER_ADVANCED_THREAT_PROTECTION = "MicrosoftDefenderAdvancedThreatProtection"
    DYNAMICS365 = "Dynamics365"
    MICROSOFT_THREAT_PROTECTION = "MicrosoftThreatProtection"
    MICROSOFT_THREAT_INTELLIGENCE = "MicrosoftThreatIntelligence"
    GENERIC_UI = "GenericUI"
    API_POLLING = "APIPolling"
    IOT = "IOT"
    GCP = "GCP"


class DataConnectorLicenseState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Describes the state of user's license for a connector kind."""

    VALID = "Valid"
    INVALID = "Invalid"
    UNKNOWN = "Unknown"


class DataTypeState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Describe whether this data type connection is enabled or not."""

    ENABLED = "Enabled"
    DISABLED = "Disabled"


class DeleteStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Indicates whether the file was deleted from the storage account."""

    DELETED = "Deleted"
    """The file was deleted."""
    NOT_DELETED = "NotDeleted"
    """The file was not deleted."""
    UNSPECIFIED = "Unspecified"
    """Unspecified"""


class DeliveryAction(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The delivery action of this mail message like Delivered, Blocked, Replaced etc."""

    UNKNOWN = "Unknown"
    """Unknown"""
    DELIVERED_AS_SPAM = "DeliveredAsSpam"
    """DeliveredAsSpam"""
    DELIVERED = "Delivered"
    """Delivered"""
    BLOCKED = "Blocked"
    """Blocked"""
    REPLACED = "Replaced"
    """Replaced"""


class DeliveryLocation(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The delivery location of this mail message like Inbox, JunkFolder etc."""

    UNKNOWN = "Unknown"
    """Unknown"""
    INBOX = "Inbox"
    """Inbox"""
    JUNK_FOLDER = "JunkFolder"
    """JunkFolder"""
    DELETED_FOLDER = "DeletedFolder"
    """DeletedFolder"""
    QUARANTINE = "Quarantine"
    """Quarantine"""
    EXTERNAL = "External"
    """External"""
    FAILED = "Failed"
    """Failed"""
    DROPPED = "Dropped"
    """Dropped"""
    FORWARDED = "Forwarded"
    """Forwarded"""


class DeploymentFetchStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Status while trying to fetch the deployment information."""

    SUCCESS = "Success"
    UNAUTHORIZED = "Unauthorized"
    NOT_FOUND = "NotFound"


class DeploymentResult(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Status while trying to fetch the deployment information."""

    SUCCESS = "Success"
    CANCELED = "Canceled"
    FAILED = "Failed"


class DeploymentState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The current state of the deployment."""

    IN_PROGRESS = "In_Progress"
    COMPLETED = "Completed"
    QUEUED = "Queued"
    CANCELING = "Canceling"


class DeviceImportance(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Device importance, determines if the device classified as 'crown jewel'."""

    UNKNOWN = "Unknown"
    """Unknown - Default value"""
    LOW = "Low"
    """Low"""
    NORMAL = "Normal"
    """Normal"""
    HIGH = "High"
    """High"""


class ElevationToken(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The elevation token associated with the process."""

    DEFAULT = "Default"
    """Default elevation token"""
    FULL = "Full"
    """Full elevation token"""
    LIMITED = "Limited"
    """Limited elevation token"""


class EntityItemQueryKind(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """EntityItemQueryKind."""

    INSIGHT = "Insight"
    """insight"""


class EntityKind(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The kind of the entity."""

    ACCOUNT = "Account"
    """Entity represents account in the system."""
    HOST = "Host"
    """Entity represents host in the system."""
    FILE = "File"
    """Entity represents file in the system."""
    AZURE_RESOURCE = "AzureResource"
    """Entity represents azure resource in the system."""
    CLOUD_APPLICATION = "CloudApplication"
    """Entity represents cloud application in the system."""
    DNS_RESOLUTION = "DnsResolution"
    """Entity represents dns resolution in the system."""
    FILE_HASH = "FileHash"
    """Entity represents file hash in the system."""
    IP = "Ip"
    """Entity represents ip in the system."""
    MALWARE = "Malware"
    """Entity represents malware in the system."""
    PROCESS = "Process"
    """Entity represents process in the system."""
    REGISTRY_KEY = "RegistryKey"
    """Entity represents registry key in the system."""
    REGISTRY_VALUE = "RegistryValue"
    """Entity represents registry value in the system."""
    SECURITY_GROUP = "SecurityGroup"
    """Entity represents security group in the system."""
    URL = "Url"
    """Entity represents url in the system."""
    IO_T_DEVICE = "IoTDevice"
    """Entity represents IoT device in the system."""
    SECURITY_ALERT = "SecurityAlert"
    """Entity represents security alert in the system."""
    BOOKMARK = "Bookmark"
    """Entity represents bookmark in the system."""
    MAIL_CLUSTER = "MailCluster"
    """Entity represents mail cluster in the system."""
    MAIL_MESSAGE = "MailMessage"
    """Entity represents mail message in the system."""
    MAILBOX = "Mailbox"
    """Entity represents mailbox in the system."""
    SUBMISSION_MAIL = "SubmissionMail"
    """Entity represents submission mail in the system."""
    NIC = "Nic"
    """Entity represents network interface in the system."""


class EntityMappingType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The V3 type of the mapped entity."""

    ACCOUNT = "Account"
    """User account entity type"""
    HOST = "Host"
    """Host entity type"""
    IP = "IP"
    """IP address entity type"""
    MALWARE = "Malware"
    """Malware entity type"""
    FILE = "File"
    """System file entity type"""
    PROCESS = "Process"
    """Process entity type"""
    CLOUD_APPLICATION = "CloudApplication"
    """Cloud app entity type"""
    DNS = "DNS"
    """DNS entity type"""
    AZURE_RESOURCE = "AzureResource"
    """Azure resource entity type"""
    FILE_HASH = "FileHash"
    """File-hash entity type"""
    REGISTRY_KEY = "RegistryKey"
    """Registry key entity type"""
    REGISTRY_VALUE = "RegistryValue"
    """Registry value entity type"""
    SECURITY_GROUP = "SecurityGroup"
    """Security group entity type"""
    URL = "URL"
    """URL entity type"""
    MAILBOX = "Mailbox"
    """Mailbox entity type"""
    MAIL_CLUSTER = "MailCluster"
    """Mail cluster entity type"""
    MAIL_MESSAGE = "MailMessage"
    """Mail message entity type"""
    SUBMISSION_MAIL = "SubmissionMail"
    """Submission mail entity type"""


class EntityProviders(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The entity provider that is synced."""

    ACTIVE_DIRECTORY = "ActiveDirectory"
    AZURE_ACTIVE_DIRECTORY = "AzureActiveDirectory"


class EntityQueryKind(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The kind of the entity query."""

    EXPANSION = "Expansion"
    INSIGHT = "Insight"
    ACTIVITY = "Activity"


class EntityQueryTemplateKind(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The kind of the entity query template."""

    ACTIVITY = "Activity"


class EntityTimelineKind(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The entity query kind."""

    ACTIVITY = "Activity"
    """activity"""
    BOOKMARK = "Bookmark"
    """bookmarks"""
    SECURITY_ALERT = "SecurityAlert"
    """security alerts"""
    ANOMALY = "Anomaly"
    """anomaly"""


class EntityType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of the entity."""

    ACCOUNT = "Account"
    """Entity represents account in the system."""
    HOST = "Host"
    """Entity represents host in the system."""
    FILE = "File"
    """Entity represents file in the system."""
    AZURE_RESOURCE = "AzureResource"
    """Entity represents azure resource in the system."""
    CLOUD_APPLICATION = "CloudApplication"
    """Entity represents cloud application in the system."""
    DNS = "DNS"
    """Entity represents dns in the system."""
    FILE_HASH = "FileHash"
    """Entity represents file hash in the system."""
    IP = "IP"
    """Entity represents ip in the system."""
    MALWARE = "Malware"
    """Entity represents malware in the system."""
    PROCESS = "Process"
    """Entity represents process in the system."""
    REGISTRY_KEY = "RegistryKey"
    """Entity represents registry key in the system."""
    REGISTRY_VALUE = "RegistryValue"
    """Entity represents registry value in the system."""
    SECURITY_GROUP = "SecurityGroup"
    """Entity represents security group in the system."""
    URL = "URL"
    """Entity represents url in the system."""
    IO_T_DEVICE = "IoTDevice"
    """Entity represents IoT device in the system."""
    SECURITY_ALERT = "SecurityAlert"
    """Entity represents security alert in the system."""
    HUNTING_BOOKMARK = "HuntingBookmark"
    """Entity represents HuntingBookmark in the system."""
    MAIL_CLUSTER = "MailCluster"
    """Entity represents mail cluster in the system."""
    MAIL_MESSAGE = "MailMessage"
    """Entity represents mail message in the system."""
    MAILBOX = "Mailbox"
    """Entity represents mailbox in the system."""
    SUBMISSION_MAIL = "SubmissionMail"
    """Entity represents submission mail in the system."""
    NIC = "Nic"
    """Entity represents network interface in the system."""


class Enum13(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Enum13."""

    EXPANSION = "Expansion"
    ACTIVITY = "Activity"


class Enum15(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Enum15."""

    ACTIVITY = "Activity"


class EventGroupingAggregationKind(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The event grouping aggregation kinds."""

    SINGLE_ALERT = "SingleAlert"
    ALERT_PER_RESULT = "AlertPerResult"


class FileFormat(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The format of the file."""

    CSV = "CSV"
    """A CSV file."""
    JSON = "JSON"
    """A JSON file."""
    UNSPECIFIED = "Unspecified"
    """A file of other format."""


class FileHashAlgorithm(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The hash algorithm type."""

    UNKNOWN = "Unknown"
    """Unknown hash algorithm"""
    MD5 = "MD5"
    """MD5 hash type"""
    SHA1 = "SHA1"
    """SHA1 hash type"""
    SHA256 = "SHA256"
    """SHA256 hash type"""
    SHA256_AC = "SHA256AC"
    """SHA256 Authenticode hash type"""


class FileImportContentType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The content type of this file."""

    BASIC_INDICATOR = "BasicIndicator"
    """File containing records with the core fields of an indicator, plus the observables to construct
    #: the STIX pattern."""
    STIX_INDICATOR = "StixIndicator"
    """File containing STIX indicators."""
    UNSPECIFIED = "Unspecified"
    """File containing other records."""


class FileImportState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The state of the file import."""

    FATAL_ERROR = "FatalError"
    """A fatal error has occurred while ingesting the file."""
    INGESTED = "Ingested"
    """The file has been ingested."""
    INGESTED_WITH_ERRORS = "IngestedWithErrors"
    """The file has been ingested with errors."""
    IN_PROGRESS = "InProgress"
    """The file ingestion is in progress."""
    INVALID = "Invalid"
    """The file is invalid."""
    WAITING_FOR_UPLOAD = "WaitingForUpload"
    """Waiting for the file to be uploaded."""
    UNSPECIFIED = "Unspecified"
    """Unspecified state."""


class GetInsightsError(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """the query kind."""

    INSIGHT = "Insight"


class IncidentClassification(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The reason the incident was closed."""

    UNDETERMINED = "Undetermined"
    """Incident classification was undetermined"""
    TRUE_POSITIVE = "TruePositive"
    """Incident was true positive"""
    BENIGN_POSITIVE = "BenignPositive"
    """Incident was benign positive"""
    FALSE_POSITIVE = "FalsePositive"
    """Incident was false positive"""


class IncidentClassificationReason(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The classification reason the incident was closed with."""

    SUSPICIOUS_ACTIVITY = "SuspiciousActivity"
    """Classification reason was suspicious activity"""
    SUSPICIOUS_BUT_EXPECTED = "SuspiciousButExpected"
    """Classification reason was suspicious but expected"""
    INCORRECT_ALERT_LOGIC = "IncorrectAlertLogic"
    """Classification reason was incorrect alert logic"""
    INACCURATE_DATA = "InaccurateData"
    """Classification reason was inaccurate data"""


class IncidentLabelType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of the label."""

    USER = "User"
    """Label manually created by a user"""
    AUTO_ASSIGNED = "AutoAssigned"
    """Label automatically created by the system"""


class IncidentSeverity(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The severity of the incident."""

    HIGH = "High"
    """High severity"""
    MEDIUM = "Medium"
    """Medium severity"""
    LOW = "Low"
    """Low severity"""
    INFORMATIONAL = "Informational"
    """Informational severity"""


class IncidentStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The status of the incident."""

    NEW = "New"
    """An active incident which isn't being handled currently"""
    ACTIVE = "Active"
    """An active incident which is being handled"""
    CLOSED = "Closed"
    """A non-active incident"""


class IncidentTaskStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """IncidentTaskStatus."""

    NEW = "New"
    """A new task"""
    COMPLETED = "Completed"
    """A completed task"""


class IngestionMode(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Describes how to ingest the records in the file."""

    INGEST_ONLY_IF_ALL_ARE_VALID = "IngestOnlyIfAllAreValid"
    """No records should be ingested when invalid records are detected."""
    INGEST_ANY_VALID_RECORDS = "IngestAnyValidRecords"
    """Valid records should still be ingested when invalid records are detected."""
    UNSPECIFIED = "Unspecified"
    """Unspecified"""


class KillChainIntent(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The intent of the alert."""

    UNKNOWN = "Unknown"
    """The default value."""
    PROBING = "Probing"
    """Probing could be an attempt to access a certain resource regardless of a malicious intent or a
    #: failed attempt to gain access to a target system to gather information prior to exploitation.
    #: This step is usually detected as an attempt originating from outside the network in attempt to
    #: scan the target system and find a way in."""
    EXPLOITATION = "Exploitation"
    """Exploitation is the stage where an attacker manage to get foothold on the attacked resource.
    #: This stage is applicable not only for compute hosts, but also for resources such as user
    #: accounts, certificates etc. Adversaries will often be able to control the resource after this
    #: stage."""
    PERSISTENCE = "Persistence"
    """Persistence is any access, action, or configuration change to a system that gives an adversary
    #: a persistent presence on that system. Adversaries will often need to maintain access to systems
    #: through interruptions such as system restarts, loss of credentials, or other failures that
    #: would require a remote access tool to restart or alternate backdoor for them to regain access."""
    PRIVILEGE_ESCALATION = "PrivilegeEscalation"
    """Privilege escalation is the result of actions that allow an adversary to obtain a higher level
    #: of permissions on a system or network. Certain tools or actions require a higher level of
    #: privilege to work and are likely necessary at many points throughout an operation. User
    #: accounts with permissions to access specific systems or perform specific functions necessary
    #: for adversaries to achieve their objective may also be considered an escalation of privilege."""
    DEFENSE_EVASION = "DefenseEvasion"
    """Defense evasion consists of techniques an adversary may use to evade detection or avoid other
    #: defenses. Sometimes these actions are the same as or variations of techniques in other
    #: categories that have the added benefit of subverting a particular defense or mitigation."""
    CREDENTIAL_ACCESS = "CredentialAccess"
    """Credential access represents techniques resulting in access to or control over system, domain,
    #: or service credentials that are used within an enterprise environment. Adversaries will likely
    #: attempt to obtain legitimate credentials from users or administrator accounts (local system
    #: administrator or domain users with administrator access) to use within the network. With
    #: sufficient access within a network, an adversary can create accounts for later use within the
    #: environment."""
    DISCOVERY = "Discovery"
    """Discovery consists of techniques that allow the adversary to gain knowledge about the system
    #: and internal network. When adversaries gain access to a new system, they must orient themselves
    #: to what they now have control of and what benefits operating from that system give to their
    #: current objective or overall goals during the intrusion. The operating system provides many
    #: native tools that aid in this post-compromise information-gathering phase."""
    LATERAL_MOVEMENT = "LateralMovement"
    """Lateral movement consists of techniques that enable an adversary to access and control remote
    #: systems on a network and could, but does not necessarily, include execution of tools on remote
    #: systems. The lateral movement techniques could allow an adversary to gather information from a
    #: system without needing additional tools, such as a remote access tool. An adversary can use
    #: lateral movement for many purposes, including remote Execution of tools, pivoting to additional
    #: systems, access to specific information or files, access to additional credentials, or to cause
    #: an effect."""
    EXECUTION = "Execution"
    """The execution tactic represents techniques that result in execution of adversary-controlled
    #: code on a local or remote system. This tactic is often used in conjunction with lateral
    #: movement to expand access to remote systems on a network."""
    COLLECTION = "Collection"
    """Collection consists of techniques used to identify and gather information, such as sensitive
    #: files, from a target network prior to exfiltration. This category also covers locations on a
    #: system or network where the adversary may look for information to exfiltrate."""
    EXFILTRATION = "Exfiltration"
    """Exfiltration refers to techniques and attributes that result or aid in the adversary removing
    #: files and information from a target network. This category also covers locations on a system or
    #: network where the adversary may look for information to exfiltrate."""
    COMMAND_AND_CONTROL = "CommandAndControl"
    """The command and control tactic represents how adversaries communicate with systems under their
    #: control within a target network."""
    IMPACT = "Impact"
    """The impact intent primary objective is to directly reduce the availability or integrity of a
    #: system, service, or network; including manipulation of data to impact a business or operational
    #: process. This would often refer to techniques such as ransom-ware, defacement, data
    #: manipulation and others."""


class Kind(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The kind of content the metadata is for."""

    DATA_CONNECTOR = "DataConnector"
    DATA_TYPE = "DataType"
    WORKBOOK = "Workbook"
    WORKBOOK_TEMPLATE = "WorkbookTemplate"
    PLAYBOOK = "Playbook"
    PLAYBOOK_TEMPLATE = "PlaybookTemplate"
    ANALYTICS_RULE_TEMPLATE = "AnalyticsRuleTemplate"
    ANALYTICS_RULE = "AnalyticsRule"
    HUNTING_QUERY = "HuntingQuery"
    INVESTIGATION_QUERY = "InvestigationQuery"
    PARSER = "Parser"
    WATCHLIST = "Watchlist"
    WATCHLIST_TEMPLATE = "WatchlistTemplate"
    SOLUTION = "Solution"
    AZURE_FUNCTION = "AzureFunction"
    LOGIC_APPS_CUSTOM_CONNECTOR = "LogicAppsCustomConnector"
    AUTOMATION_RULE = "AutomationRule"


class MatchingMethod(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Grouping matching method. When method is Selected at least one of groupByEntities,
    groupByAlertDetails, groupByCustomDetails must be provided and not empty.
    """

    ALL_ENTITIES = "AllEntities"
    """Grouping alerts into a single incident if all the entities match"""
    ANY_ALERT = "AnyAlert"
    """Grouping any alerts triggered by this rule into a single incident"""
    SELECTED = "Selected"
    """Grouping alerts into a single incident if the selected entities, custom details and alert
    #: details match"""


class MicrosoftSecurityProductName(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The alerts' productName on which the cases will be generated."""

    MICROSOFT_CLOUD_APP_SECURITY = "Microsoft Cloud App Security"
    AZURE_SECURITY_CENTER = "Azure Security Center"
    AZURE_ADVANCED_THREAT_PROTECTION = "Azure Advanced Threat Protection"
    AZURE_ACTIVE_DIRECTORY_IDENTITY_PROTECTION = "Azure Active Directory Identity Protection"
    AZURE_SECURITY_CENTER_FOR_IO_T = "Azure Security Center for IoT"
    OFFICE365_ADVANCED_THREAT_PROTECTION = "Office 365 Advanced Threat Protection"
    MICROSOFT_DEFENDER_ADVANCED_THREAT_PROTECTION = "Microsoft Defender Advanced Threat Protection"


class MtpProvider(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The available data providers."""

    MICROSOFT_DEFENDER_FOR_CLOUD_APPS = "microsoftDefenderForCloudApps"
    MICROSOFT_DEFENDER_FOR_IDENTITY = "microsoftDefenderForIdentity"


class Operator(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Operator used for list of dependencies in criteria array."""

    AND = "AND"
    OR = "OR"


class OSFamily(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The operating system type."""

    LINUX = "Linux"
    """Host with Linux operating system."""
    WINDOWS = "Windows"
    """Host with Windows operating system."""
    ANDROID = "Android"
    """Host with Android operating system."""
    IOS = "IOS"
    """Host with IOS operating system."""
    UNKNOWN = "Unknown"
    """Host with Unknown operating system."""


class OutputType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Insights Column type."""

    NUMBER = "Number"
    STRING = "String"
    DATE = "Date"
    ENTITY = "Entity"


class OwnerType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of the owner the incident is assigned to."""

    UNKNOWN = "Unknown"
    """The incident owner type is unknown"""
    USER = "User"
    """The incident owner type is an AAD user"""
    GROUP = "Group"
    """The incident owner type is an AAD group"""


class PermissionProviderScope(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Permission provider scope."""

    RESOURCE_GROUP = "ResourceGroup"
    SUBSCRIPTION = "Subscription"
    WORKSPACE = "Workspace"


class PollingFrequency(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The polling frequency for the TAXII server."""

    ONCE_A_MINUTE = "OnceAMinute"
    """Once a minute"""
    ONCE_AN_HOUR = "OnceAnHour"
    """Once an hour"""
    ONCE_A_DAY = "OnceADay"
    """Once a day"""


class Priority(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Priority of recommendation."""

    LOW = "Low"
    """Low priority for recommendation."""
    MEDIUM = "Medium"
    """Medium priority for recommendation."""
    HIGH = "High"
    """High priority for recommendation."""


class ProviderName(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Provider name."""

    MICROSOFT_OPERATIONAL_INSIGHTS_SOLUTIONS = "Microsoft.OperationalInsights/solutions"
    MICROSOFT_OPERATIONAL_INSIGHTS_WORKSPACES = "Microsoft.OperationalInsights/workspaces"
    MICROSOFT_OPERATIONAL_INSIGHTS_WORKSPACES_DATASOURCES = "Microsoft.OperationalInsights/workspaces/datasources"
    MICROSOFT_AADIAM_DIAGNOSTIC_SETTINGS = "microsoft.aadiam/diagnosticSettings"
    MICROSOFT_OPERATIONAL_INSIGHTS_WORKSPACES_SHARED_KEYS = "Microsoft.OperationalInsights/workspaces/sharedKeys"
    MICROSOFT_AUTHORIZATION_POLICY_ASSIGNMENTS = "Microsoft.Authorization/policyAssignments"


class ProvisioningState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The triggered analytics rule run provisioning state."""

    ACCEPTED = "Accepted"
    IN_PROGRESS = "InProgress"
    SUCCEEDED = "Succeeded"
    FAILED = "Failed"
    CANCELED = "Canceled"


class RegistryHive(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """the hive that holds the registry key."""

    HKEY_LOCAL_MACHINE = "HKEY_LOCAL_MACHINE"
    """HKEY_LOCAL_MACHINE"""
    HKEY_CLASSES_ROOT = "HKEY_CLASSES_ROOT"
    """HKEY_CLASSES_ROOT"""
    HKEY_CURRENT_CONFIG = "HKEY_CURRENT_CONFIG"
    """HKEY_CURRENT_CONFIG"""
    HKEY_USERS = "HKEY_USERS"
    """HKEY_USERS"""
    HKEY_CURRENT_USER_LOCAL_SETTINGS = "HKEY_CURRENT_USER_LOCAL_SETTINGS"
    """HKEY_CURRENT_USER_LOCAL_SETTINGS"""
    HKEY_PERFORMANCE_DATA = "HKEY_PERFORMANCE_DATA"
    """HKEY_PERFORMANCE_DATA"""
    HKEY_PERFORMANCE_NLSTEXT = "HKEY_PERFORMANCE_NLSTEXT"
    """HKEY_PERFORMANCE_NLSTEXT"""
    HKEY_PERFORMANCE_TEXT = "HKEY_PERFORMANCE_TEXT"
    """HKEY_PERFORMANCE_TEXT"""
    HKEY_A = "HKEY_A"
    """HKEY_A"""
    HKEY_CURRENT_USER = "HKEY_CURRENT_USER"
    """HKEY_CURRENT_USER"""


class RegistryValueKind(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Specifies the data types to use when storing values in the registry, or identifies the data
    type of a value in the registry.
    """

    NONE = "None"
    """None"""
    UNKNOWN = "Unknown"
    """Unknown value type"""
    STRING = "String"
    """String value type"""
    EXPAND_STRING = "ExpandString"
    """ExpandString value type"""
    BINARY = "Binary"
    """Binary value type"""
    D_WORD = "DWord"
    """DWord value type"""
    MULTI_STRING = "MultiString"
    """MultiString value type"""
    Q_WORD = "QWord"
    """QWord value type"""


class RepoType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of repository."""

    GITHUB = "Github"
    DEV_OPS = "DevOps"


class SecurityMLAnalyticsSettingsKind(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The kind of security ML analytics settings."""

    ANOMALY = "Anomaly"


class SettingKind(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The kind of the setting."""

    ANOMALIES = "Anomalies"
    EYES_ON = "EyesOn"
    ENTITY_ANALYTICS = "EntityAnalytics"
    UEBA = "Ueba"


class SettingsStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The anomaly SecurityMLAnalyticsSettings status."""

    PRODUCTION = "Production"
    """Anomaly settings status in Production mode"""
    FLIGHTING = "Flighting"
    """Anomaly settings status in Flighting mode"""


class SettingType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The kind of the setting."""

    COPYABLE_LABEL = "CopyableLabel"
    INSTRUCTION_STEPS_GROUP = "InstructionStepsGroup"
    INFO_MESSAGE = "InfoMessage"


class SourceKind(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Source type of the content."""

    LOCAL_WORKSPACE = "LocalWorkspace"
    COMMUNITY = "Community"
    SOLUTION = "Solution"
    SOURCE_REPOSITORY = "SourceRepository"


class SourceType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The sourceType of the watchlist."""

    LOCAL_FILE = "Local file"
    REMOTE_STORAGE = "Remote storage"


class State(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """State of recommendation."""

    ACTIVE = "Active"
    """Recommendation is active."""
    DISABLED = "Disabled"
    """Recommendation is disabled."""
    COMPLETED_BY_USER = "CompletedByUser"
    """Recommendation has been completed by user."""
    COMPLETED_BY_ACTION = "CompletedByAction"
    """Recommendation has been completed by action."""
    HIDDEN = "Hidden"
    """Recommendation is hidden."""


class SupportTier(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Type of support for content item."""

    MICROSOFT = "Microsoft"
    PARTNER = "Partner"
    COMMUNITY = "Community"


class TemplateStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The alert rule template status."""

    INSTALLED = "Installed"
    """Alert rule template installed. and can not use more then once"""
    AVAILABLE = "Available"
    """Alert rule template is available."""
    NOT_AVAILABLE = "NotAvailable"
    """Alert rule template is not available"""


class ThreatIntelligenceResourceKindEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The kind of the threat intelligence entity."""

    INDICATOR = "indicator"
    """Entity represents threat intelligence indicator in the system."""


class ThreatIntelligenceSortingCriteriaEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Sorting order (ascending/descending/unsorted)."""

    UNSORTED = "unsorted"
    ASCENDING = "ascending"
    DESCENDING = "descending"


class TriggerOperator(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The operation against the threshold that triggers alert rule."""

    GREATER_THAN = "GreaterThan"
    LESS_THAN = "LessThan"
    EQUAL = "Equal"
    NOT_EQUAL = "NotEqual"


class TriggersOn(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """TriggersOn."""

    INCIDENTS = "Incidents"
    """Trigger on Incidents"""
    ALERTS = "Alerts"
    """Trigger on Alerts"""


class TriggersWhen(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """TriggersWhen."""

    CREATED = "Created"
    """Trigger on created objects"""
    UPDATED = "Updated"
    """Trigger on updated objects"""


class UebaDataSources(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The data source that enriched by ueba."""

    AUDIT_LOGS = "AuditLogs"
    AZURE_ACTIVITY = "AzureActivity"
    SECURITY_EVENT = "SecurityEvent"
    SIGNIN_LOGS = "SigninLogs"


class Version(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The version of the source control."""

    V1 = "V1"
    V2 = "V2"
