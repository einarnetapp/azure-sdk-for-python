# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import sys
from typing import Any, Callable, Dict, IO, Optional, TypeVar, Union, cast, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.polling import LROPoller, NoPolling, PollingMethod
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat
from azure.mgmt.core.polling.arm_polling import ARMPolling

from .. import models as _models
from ..._serialization import Serializer
from .._vendor import _convert_request, _format_url_section

if sys.version_info >= (3, 8):
    from typing import Literal  # pylint: disable=no-name-in-module, ungrouped-imports
else:
    from typing_extensions import Literal  # type: ignore  # pylint: disable=ungrouped-imports
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_create_notifications_at_tenant_action_group_resource_level_request(
    management_group_id: str, tenant_action_group_name: str, *, x_ms_client_tenant_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Literal["2023-03-01-preview"] = kwargs.pop(
        "api_version", _params.pop("api-version", "2023-03-01-preview")
    )
    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop(
        "template_url",
        "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Insights/tenantActionGroups/{tenantActionGroupName}/createNotifications",
    )  # pylint: disable=line-too-long
    path_format_arguments = {
        "managementGroupId": _SERIALIZER.url("management_group_id", management_group_id, "str"),
        "tenantActionGroupName": _SERIALIZER.url("tenant_action_group_name", tenant_action_group_name, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["x-ms-client-tenant-id"] = _SERIALIZER.header("x_ms_client_tenant_id", x_ms_client_tenant_id, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_get_test_notifications_at_tenant_action_group_resource_level_request(
    management_group_id: str,
    tenant_action_group_name: str,
    notification_id: str,
    *,
    x_ms_client_tenant_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Literal["2023-03-01-preview"] = kwargs.pop(
        "api_version", _params.pop("api-version", "2023-03-01-preview")
    )
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop(
        "template_url",
        "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Insights/tenantActionGroups/{tenantActionGroupName}/notificationStatus/{notificationId}",
    )  # pylint: disable=line-too-long
    path_format_arguments = {
        "managementGroupId": _SERIALIZER.url("management_group_id", management_group_id, "str"),
        "tenantActionGroupName": _SERIALIZER.url("tenant_action_group_name", tenant_action_group_name, "str"),
        "notificationId": _SERIALIZER.url("notification_id", notification_id, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["x-ms-client-tenant-id"] = _SERIALIZER.header("x_ms_client_tenant_id", x_ms_client_tenant_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


class ActionGroupsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~$(python-base-namespace).v2023_03_01_preview.MonitorManagementClient`'s
        :attr:`action_groups` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    def _create_notifications_at_tenant_action_group_resource_level_initial(
        self,
        management_group_id: str,
        tenant_action_group_name: str,
        x_ms_client_tenant_id: str,
        notification_request: Union[_models.TenantNotificationRequestBody, IO],
        **kwargs: Any
    ) -> Optional[_models.TestNotificationDetailsResponse]:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: Literal["2023-03-01-preview"] = kwargs.pop(
            "api_version", _params.pop("api-version", "2023-03-01-preview")
        )
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[Optional[_models.TestNotificationDetailsResponse]] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(notification_request, (IO, bytes)):
            _content = notification_request
        else:
            _json = self._serialize.body(notification_request, "TenantNotificationRequestBody")

        request = build_create_notifications_at_tenant_action_group_resource_level_request(
            management_group_id=management_group_id,
            tenant_action_group_name=tenant_action_group_name,
            x_ms_client_tenant_id=x_ms_client_tenant_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self._create_notifications_at_tenant_action_group_resource_level_initial.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = None
        response_headers = {}
        if response.status_code == 200:
            deserialized = self._deserialize("TestNotificationDetailsResponse", pipeline_response)

        if response.status_code == 202:
            response_headers["location"] = self._deserialize("str", response.headers.get("location"))

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized

    _create_notifications_at_tenant_action_group_resource_level_initial.metadata = {
        "url": "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Insights/tenantActionGroups/{tenantActionGroupName}/createNotifications"
    }

    @overload
    def begin_create_notifications_at_tenant_action_group_resource_level(
        self,
        management_group_id: str,
        tenant_action_group_name: str,
        x_ms_client_tenant_id: str,
        notification_request: _models.TenantNotificationRequestBody,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.TestNotificationDetailsResponse]:
        """Send test notifications to a set of provided receivers.

        :param management_group_id: The management group id. Required.
        :type management_group_id: str
        :param tenant_action_group_name: The name of the action group. Required.
        :type tenant_action_group_name: str
        :param x_ms_client_tenant_id: The tenant ID of the client making the request. Required.
        :type x_ms_client_tenant_id: str
        :param notification_request: The notification request body which includes the contact details.
         Required.
        :type notification_request:
         ~$(python-base-namespace).v2023_03_01_preview.models.TenantNotificationRequestBody
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns either TestNotificationDetailsResponse or the
         result of cls(response)
        :rtype:
         ~azure.core.polling.LROPoller[~$(python-base-namespace).v2023_03_01_preview.models.TestNotificationDetailsResponse]
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def begin_create_notifications_at_tenant_action_group_resource_level(
        self,
        management_group_id: str,
        tenant_action_group_name: str,
        x_ms_client_tenant_id: str,
        notification_request: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.TestNotificationDetailsResponse]:
        """Send test notifications to a set of provided receivers.

        :param management_group_id: The management group id. Required.
        :type management_group_id: str
        :param tenant_action_group_name: The name of the action group. Required.
        :type tenant_action_group_name: str
        :param x_ms_client_tenant_id: The tenant ID of the client making the request. Required.
        :type x_ms_client_tenant_id: str
        :param notification_request: The notification request body which includes the contact details.
         Required.
        :type notification_request: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns either TestNotificationDetailsResponse or the
         result of cls(response)
        :rtype:
         ~azure.core.polling.LROPoller[~$(python-base-namespace).v2023_03_01_preview.models.TestNotificationDetailsResponse]
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def begin_create_notifications_at_tenant_action_group_resource_level(
        self,
        management_group_id: str,
        tenant_action_group_name: str,
        x_ms_client_tenant_id: str,
        notification_request: Union[_models.TenantNotificationRequestBody, IO],
        **kwargs: Any
    ) -> LROPoller[_models.TestNotificationDetailsResponse]:
        """Send test notifications to a set of provided receivers.

        :param management_group_id: The management group id. Required.
        :type management_group_id: str
        :param tenant_action_group_name: The name of the action group. Required.
        :type tenant_action_group_name: str
        :param x_ms_client_tenant_id: The tenant ID of the client making the request. Required.
        :type x_ms_client_tenant_id: str
        :param notification_request: The notification request body which includes the contact details.
         Is either a TenantNotificationRequestBody type or a IO type. Required.
        :type notification_request:
         ~$(python-base-namespace).v2023_03_01_preview.models.TenantNotificationRequestBody or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns either TestNotificationDetailsResponse or the
         result of cls(response)
        :rtype:
         ~azure.core.polling.LROPoller[~$(python-base-namespace).v2023_03_01_preview.models.TestNotificationDetailsResponse]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: Literal["2023-03-01-preview"] = kwargs.pop(
            "api_version", _params.pop("api-version", "2023-03-01-preview")
        )
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.TestNotificationDetailsResponse] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._create_notifications_at_tenant_action_group_resource_level_initial(
                management_group_id=management_group_id,
                tenant_action_group_name=tenant_action_group_name,
                x_ms_client_tenant_id=x_ms_client_tenant_id,
                notification_request=notification_request,
                api_version=api_version,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            deserialized = self._deserialize("TestNotificationDetailsResponse", pipeline_response)
            if cls:
                return cls(pipeline_response, deserialized, {})
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(
                PollingMethod, ARMPolling(lro_delay, lro_options={"final-state-via": "location"}, **kwargs)
            )
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)  # type: ignore

    begin_create_notifications_at_tenant_action_group_resource_level.metadata = {
        "url": "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Insights/tenantActionGroups/{tenantActionGroupName}/createNotifications"
    }

    @distributed_trace
    def get_test_notifications_at_tenant_action_group_resource_level(
        self,
        management_group_id: str,
        tenant_action_group_name: str,
        x_ms_client_tenant_id: str,
        notification_id: str,
        **kwargs: Any
    ) -> _models.TestNotificationDetailsResponse:
        """Get the test notifications by the notification id.

        :param management_group_id: The management group id. Required.
        :type management_group_id: str
        :param tenant_action_group_name: The name of the action group. Required.
        :type tenant_action_group_name: str
        :param x_ms_client_tenant_id: The tenant ID of the client making the request. Required.
        :type x_ms_client_tenant_id: str
        :param notification_id: The notification id. Required.
        :type notification_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: TestNotificationDetailsResponse or the result of cls(response)
        :rtype: ~$(python-base-namespace).v2023_03_01_preview.models.TestNotificationDetailsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: Literal["2023-03-01-preview"] = kwargs.pop(
            "api_version", _params.pop("api-version", "2023-03-01-preview")
        )
        cls: ClsType[_models.TestNotificationDetailsResponse] = kwargs.pop("cls", None)

        request = build_get_test_notifications_at_tenant_action_group_resource_level_request(
            management_group_id=management_group_id,
            tenant_action_group_name=tenant_action_group_name,
            notification_id=notification_id,
            x_ms_client_tenant_id=x_ms_client_tenant_id,
            api_version=api_version,
            template_url=self.get_test_notifications_at_tenant_action_group_resource_level.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("TestNotificationDetailsResponse", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_test_notifications_at_tenant_action_group_resource_level.metadata = {
        "url": "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Insights/tenantActionGroups/{tenantActionGroupName}/notificationStatus/{notificationId}"
    }
